Invoke-Expression (&starship init powershell)

# Keybindings for completion
Set-PSReadLineKeyHandler -Chord "Alt+l" -Function ForwardWord
Set-PSReadLineKeyHandler -Chord "Alt+h" -Function ForwardChar

# Command completions
chezmoi completion powershell | Out-String | Invoke-Expression
starship completions powershell | Out-String | Invoke-Expression

# Path to the exported package list
$WingetExportPath = {{ joinPath .chezmoi.sourceDir ".chezmoidata" "packages-windows.json" | quote }}

function Update-WingetListAndSync
{
    param (
        [string]$PackageId
    )

    winget export --output $WingetExportPath --force

    if ($LASTEXITCODE -eq 0)
    {
        Write-Host "Package list updated. Syncing with chezmoi git..." -ForegroundColor Cyan
        
        chezmoi git add .
        chezmoi git commit -m "refactor($PackageId)"
        chezmoi git push origin master

        Write-Host "Sync complete!" -ForegroundColor Green
    } else
    {
        Write-Host "Failed to update package list." -ForegroundColor Red
    }
}

function Install-WingetPackage
{
    param (
        [string]$PackageId
    )

    winget install --id $PackageId --silent --accept-source-agreements --accept-package-agreements

    if ($LASTEXITCODE -eq 0)
    {
        Write-Host "Successfully installed $PackageId. Updating package list..." -ForegroundColor Green
        Update-WingetListAndSync -PackageId $PackageId
    } else
    {
        Write-Host "Failed to install $PackageId." -ForegroundColor Red
    }
}

function Uninstall-WingetPackage
{
    param (
        [string]$PackageId
    )

    winget uninstall --id $PackageId

    if ($LASTEXITCODE -eq 0)
    {
        Write-Host "Successfully uninstalled $PackageId. Updating package list..." -ForegroundColor Green
        Update-WingetListAndSync -PackageId $PackageId
    } else
    {
        Write-Host "Failed to uninstall $PackageId." -ForegroundColor Red
    }
}
